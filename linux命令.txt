一、常用系统工作命令
1、echo
	echo 命令用于在终端输出字符串或变量提取后的值，格式为“echo [字符串 | $变量]”。
	例如，把指定字符串“Linuxprobe.com”输出到终端屏幕的命令为：
	[root@linuxprobe ~]# echo Linuxprobe.Com
	该命令会在终端屏幕上显示如下信息：
	Linuxprobe.Com
	下面，我们使用$变量的方式提取变量 SHELL 的值，并将其输出到屏幕上：
	[root@linuxprobe ~]# echo $SHELL
	/bin/bash
	
2、date	
	date 命令用于显示及设置系统的时间或日期，格式为“date [选项] [+指定的格式]”。
	只需在强大的 date 命令中输入以“+”号开头的参数，即可按照指定格式来输出系统的时
	间或日期，这样在日常工作时便可以把备份数据的命令与指定格式输出的时间信息结合到一
	起。
		%t 跳格[Tab 键]
		%H 小时（00～23）
		%I 小时（00～12）
		%M 分钟（00～59）
		%S 秒（00～59）
		%j 今年中的第几天
		
	按照默认格式查看当前系统时间的 date 命令如下所示：
	[root@linuxprobe ~]# date
	Mon Aug 24 16:11:23 CST 2017
	按照“年-月-日 小时:分钟:秒”的格式查看当前系统时间的 date 命令如下所示：
	[root@linuxprobe ~]# date "+%Y-%m-%d %H:%M:%S"
	2017-08-24 16:29:12
	将系统的当前时间设置为 2017 年 9 月 1 日 8 点 30 分的 date 命令如下所示：
	[root@linuxprobe ~]# date -s "20170901 8:30:00"
	Fri Sep 1 08:30:00 CST 2017
	再次使用 date 命令并按照默认的格式查看当前的系统时间，如下所示：
	[root@linuxprobe ~]# date
	Fri Sep 1 08:30:01 CST 2017
	date 命令中的参数%j 可用来查看今天是当年中的第几天。这个参数能够很好地区分备份时
	间的新旧，即数字越大，越靠近当前时间。该参数的使用方式以及显示结果如下所示。
	[root@linuxprobe ~]# date "+%j"
	244
	
3、reboot
	reboot 命令用于重启系统，其格式为 reboot。
	由于重启计算机这种操作会涉及硬件资源的管理权限，因此默认只能使用 root 管理员来
	重启，其命令如下：
	[root@linuxprobe ~]# reboot

4、poweroff	
	poweroff 命令用于关闭系统，其格式为 poweroff。
	该命令与 reboot 命令相同，都会涉及硬件资源的管理权限，因此默认只有 root 管理员才
	可以关闭电脑，其命令如下：
	[root@linuxprobe ~]# poweroff
	
5、wget	
	wget 命令用于在终端中下载网络文件，格式为“wget [参数] 下载地址”。
		-b 后台下载模式
		-P 下载到指定目录
		-t 最大尝试次数
		-c 断点续传
		-p 下载页面内所有资源，包括图片、视频等
		-r 递归下载
	尝试使用 wget 命令从本书的配套站点中下载本书的最新 pdf 格式电子文档
	[root@linuxprobe ~]# wget http://www.linuxprobe.com/docs/LinuxProbe.pdf
	接下来，我们使用 wget 命令递归下载 www.linuxprobe.com 网站内的所有页面数据以及文件，
	下载完后会自动保存到当前路径下一个名为 www.linuxprobe.com 的目录中。
	执行该操作的命令为 wget -r -p http://www.linuxprobe.com，该命令的执行结果如下。
	[root@linuxprobe ~]# wget -r -p http://www.linuxprobe.com
	
6、ps
	ps 命令用于查看系统中的进程状态，格式为“ps [参数]”。
		-a 显示所有进程（包括其他用户的进程）
		-u 用户以及其他详细信息
		-x 显示没有控制终端的进程
	Linux 系统中时刻运行着许多进程，如果能够合理地管理它们，则可以优化系统的性能。
	在Linux 系统中，有 5 种常见的进程状态，分别为运行、中断、不可中断、僵死与停止，
	其各自含义如下所示。
		➢ R(运行): 进程正在运行或在运行队列中等待。
		➢ S(中断): 进程处于休眠中，当某个条件形成后或者接收到信号时，则脱离该状态。
		➢ D(不可中断): 进程不响应系统异步信号，即便用 kill 命令也不能将其中断。
		➢ Z(僵死): 进程已经终止，但进程描述符依然存在, 直到父进程调用 wait4()系统函数
		➢ T(中断): 进程收到停止信号后停止运行。

注：在Linux系统中的命令参数有长短格式之分，长格式和长格式之间不能合并，
	长格式和短格式之间也不能合并，但短格式和短格式之间是可以合并的，
	合并后仅保留一个-（减号）即可。另外ps命令可允许参数不加减号（-），
	因此可直接写成ps aux的样子
	
7、top
	top 命令用于动态地监视进程活动与系统负载等信息，其格式为 top。
	top 命令相当强大，能够动态地查看系统运维状态，完全将它看作 Linux 中的“强化版的Windows 任务管理器”。 
	top 命令执行结果的前 5 行为系统整体的统计信息，其所代表的含义如下。
		➢ 第 1 行：系统时间、运行时间、登录终端数、系统负载（三个数值分别为 1 分钟、 5
		分钟、 15 分钟内的平均值，数值越小意味着负载越低）。
		➢ 第 2 行：进程总数、运行中的进程数、睡眠中的进程数、停止的进程数、僵死的进程
		数。
		➢ 第 3 行：用户占用资源百分比、系统内核占用资源百分比、改变过优先级的进程资源
		百分比、空闲的资源百分比等(数据均为CPU数据并以百分比格式显示，例如“97.1 id" 
		意味着97.1%的CPU处理器资源处于空闲。)
		➢ 第 4 行：物理内存总量、内存使用量、内存空闲量、作为内核缓存的内存量。
		➢ 第 5 行：虚拟内存总量、虚拟内存使用量、虚拟内存空闲量、已被提前加载的内存量

8、pidof
	pidof 命令用于查询某个指定服务进程的 PID 值，格式为“pidof [参数] [服务名称]”。
	每个进程的进程号码值（PID）是唯一的，因此可以通过 PID 来区分不同的进程。例如，
	可以使用如下命令来查询本机上 sshd 服务程序的 PID：
	[root@linuxprobe ~]# pidof sshd
	2156
	
9、kill
	kill 命令用于终止某个指定 PID 的服务进程，格式为“kill [参数] [进程 PID]”。
	接下来，我们使用 kill 命令把上面用 pidof 命令查询到的 PID 所代表的进程终止掉，
	其命令如下所示。这种操作的效果等同于强制停止 sshd 服务。
	[root@linuxprobe ~]# kill 2156
			
10、killall			
	killall 命令用于终止某个指定名称的服务所对应的全部进程，格式为：“killall [参数] [服务名称]”。
	通常来讲，复杂软件的服务程序会有多个进程协同为用户提供服务，
	如果逐个去结束这些进程会比较麻烦，此时可以使用 killall 命令来批量结束某个服务程序带有的全部进程。
	
注：
	如果我们在系统终端中执行一个命令后想立即停止它，可以同时按下Ctrl+C组合键（生产环境中比较常用的一个快捷键），
	这样将立即终止该命令的进程。或者，如果有些命令在执行时不断地在屏幕上输出信息，影响到后续命令的输入，
	则可以在执行命令时在末尾添加上一个&符号，这样命令将进行系统后台来执行。

二、系统状态检测命令
11、ifconfig
	ifconfig 命令用于获取网卡配置与网络状态等信息，格式为“ifconfig [网络设备] [参数]”。
	使用 ifconfig 命令来查看本机当前的网卡配置与网络状态等信息时，其实主要查看的就
	是网卡名称、 inet 参数后面的 IP 地址、 ether 参数后面的网卡物理地址（又称为 MAC 地址），
	以及 RX、 TX 的接收数据包与发送数据包的个数及累计流量
	
12、uname
	uname 命令用于查看系统内核与系统版本等信息，格式为“uname [-a]”。
	在使用 uname 命令时，一般会固定搭配上-a 参数来完整地查看当前系统的内核名称、主
	机名、内核发行版本、节点名、系统时间、硬件名称、硬件平台、处理器类型以及操作系统名
	称等信息。
	[root@linuxprobe ~]# uname -a
	Linux linuxprobe.com 3.10.0-123.el7.x86_64 #1 SMP Mon May 5 11:16:57 EDT 2017
	x86_64 x86_64 x86_64 GNU/Linux
	如果要查看当前系统版本的详细信息，则需要查看 redhat-release 文件，
	其命令以及相应的结果如下：
	[root@linuxprobe ~]# cat /etc/redhat-release
	Red Hat Enterprise Linux Server release 7.0 (Maipo)
	
13、uptime
	uptime 用于查看系统的负载信息，格式为 uptime。
	uptime 命令真的很棒，它可以显示当前系统时间、系统已运行时间、启用终端数量以及平均负载值等信息。
	平均负载值指的是系统在最近 1 分钟、 5 分钟、 15 分钟内的压力情况负载值越低越好，
	尽量不要长期超过1，在生产环境中不要超过5。
	[root@linuxprobe ~]# uptime
	22:49:55 up 10 min, 2 users, load average: 0.01, 0.19, 0.18
	
14、free
	free 用于显示当前系统中内存的使用量信息，格式为“free [-h]”。
	为了保证 Linux 系统不会因资源耗尽而突然宕机，运维人员需要时刻关注内存的使用量。
	在使用 free 命令时，可以结合使用-h 参数以更人性化的方式输出当前内存的实时使用量信息。
	[root@linuxprobe ~]# free -h
	
15、who
	who 用于查看当前登入主机的用户终端信息，格式为“who [参数]”。
	这三个简单的字母可以快速显示出所有正在登录本机的用户的名称以及他们正在开启的终端信息。
	
16、last
	last 命令用于查看所有系统的登录记录，格式为“last [参数]”。
	使用 last 命令可以查看本机的登录记录。但是，由于这些信息都是以日志文件的形式保存在系统中,
	因此黑客可以很容易地对内容进行篡改。千万不要单纯以该命令的输出信息而判断系统有无被恶意入侵。

17、history
	history 命令用于显示历史执行过的命令，格式为“history [-c]”。
	执行 history 命令能显示出当前用户在本地计算机中执行过的最近 1000 条命令记录。
	如果觉得 1000 不够用，还可以自定义/etc/profile 文件中的HISTSIZE 变量值。
	在使用 history 命令时，如果使用-c 参数则会清空所有的命令历史记录。
	还可以使用“!编码数字”的方式来重复执行某一次的命令。
	
	历史命令会被保存到用户家目录中的.bash_history 文件中。 Linux 系统中以点（.）开
	头的文件均代表隐藏文件，这些文件大多数为系统服务文件，可以用 cat 命令查看其文件内容。
	[root@linuxprobe ~]# cat ~/.bash_history
	要清空当前用户在本机上执行的 Linux 命令历史记录信息，可执行如下命令：
	[root@linuxprobe ~]# history -c

18、sosreport
	sosreport 命令用于收集系统配置及架构信息并输出诊断文档，格式为 sosreport。
	当 Linux 系统出现故障需要联系技术支持人员时，大多数时候都要先使用这个命令来简
	单收集系统的运行状态和服务配置信息，以便让技术支持人员能够远程解决一些小问题，亦
	或让他们能提前了解某些复杂问题。
	
三、工作目录切换命令
19、pwd
	pwd 命令用于显示用户当前所处的工作目录，格式为“pwd [选项]”。
	[root@linuxprobe etc]# pwd
	/etc
	
20、cd
	cd 命令用于切换工作路径，格式为“cd [目录名称]”。
	这个命令应该是最常用的一个 Linux 命令了。可以通过 cd 命令迅速、灵活地切换到不同
	的工作目录。除了常见的切换目录方式，还可以使用“cd -”命令返回到上一次所处的目录，
	使用“cd ..”命令进入上级目录， 以及使用“cd ~”命令切换到当前用户的家目录，亦或使用
	“cd ~username”切换到其他用户的家目录。例如，可以使用“cd 路径”的方式切换进/etc 目录中：
	[root@linuxprobe ~]# cd /etc
	同样的道理，可使用下述命令切换到/bin 目录中：
	[root@linuxprobe etc]# cd /bin
	此时，要返回到上一次的目录（即/etc 目录），可执行如下命令：
	[root@linuxprobe bin]# cd -
	/etc
	[root@linuxprobe etc]#
	还可以通过下面的命令快速切换到用户的家目录：
	[root@linuxprobe etc]# cd ~
	[root@linuxprobe ~]#
	
21、ls
	ls 命令用于显示目录中的文件信息，格式为“ls [选项] [文件] ”。
	所处的工作目录不同，当前工作目录下的文件肯定也不同。使用 ls 命令的“-a”参数看
	到全部文件（包括隐藏文件），使用“-l”参数可以查看文件的属性、大小等详细信息。
	将这两个参数整合之后，再执行 ls 命令即可查看当前目录中的所有文件并输出这些文件的属性信息
	[root@linuxprobe ~]# ls -al
	total 60
	如果想要查看目录属性信息，则需要额外添加一个-d 参数。
	例如，可使用如下命令查看/etc 目录的权限与属性信息：
	[root@linuxprobe ~]# ls -ld /etc
	drwxr-xr-x. 132 root root 8192 Jul 10 10:48 /etc
	
四、文本文件编辑命令
22、cat
	cat 命令用于查看纯文本文件（内容较少的），格式为“cat [选项] [文件]”。
	Linux 系统中有多个用于查看文本内容的命令，每个命令都有自己的特点，比如这个 cat
	命令就是用于查看内容较少的纯文本文件的。cat这个命令也很好记，因为 cat在英语中是“猫”
	的意思，小猫咪是不是给您一种娇小、可爱的感觉呢？
	如果在查看文本内容时还想顺便显示行号的话，不妨在 cat 命令后面追加一个-n 参数：
	[root@linuxprobe ~]# cat -n initial-setup-ks.cfg
	1 #version=RHEL7
	2 # X Window System configuration information
	3 xconfig --startxonboot
	4 5
	# License agreement
	6 eula --agreed
	7 # System authorization information
	8 auth --enableshadow --passalgo=sha512
	9 # Use CDROM installation media
	10 cdrom
	11 # Run the Setup Agent on first boot
	12 firstboot --enable
	13 # Keyboard layouts
	14 keyboard --vckeymap=us --xlayouts='us'
	15 # System language
	16 lang en_US.UTF-8
	………………省略部分输出信息……………
	
23、more
	more 命令用于查看纯文本文件（内容较多的），格式为“more [选项]文件”。
	如果需要阅读长篇小说或者非常长的配置文件，那么“小猫咪”可就真的不适合了。因
	为一旦使用 cat 命令阅读长篇的文本内容，信息就会在屏幕上快速翻滚，导致自己还没有来得
	及看到，内容就已经翻篇了。因此对于长篇的文本内容，推荐使用 more 命令来查看。 more 命
	令会在最下面使用百分比的形式来提示您已经阅读了多少内容。您还可以使用空格键或回车
	键向下翻页：
	[root@linuxprobe ~]# more initial-setup-ks.cfg
	
24、head
	head 命令用于查看纯文本文档的前 N 行，格式为“head [选项] [文件]”。
	在阅读文本内容时，谁也难以保证会按照从头到尾的顺序往下看完整个文件。如果只想
	查看文本中前 20 行的内容，该怎么办呢？ head 命令可以派上用场了：
	[root@linuxprobe ~]# head -n 20 initial-setup-ks.cfg
	
25、tail
	tail 命令用于查看纯文本文档的后 N 行或持续刷新内容，格式为“tail [选项] [文件]”。
	我们可能还会遇到另外一种情况，比如需要查看文本内容的最后 20 行，这时就需要用到tail 命令了。 
	tail 命令的操作方法与 head 命令非常相似，只需要执行“tail -n 20 文件名”命令就可以达到这样的效果。 
	tail 命令最强悍的功能是可以持续刷新一个文件的内容，
	当想要实时查看最新日志文件时，这特别有用，此时的命令格式为“tail -f 文件名”：
	[root@linuxprobe ~]# tail -f /var/log/messages
	
26、tr
	tr 命令用于替换文本文件中的字符，格式为“tr [原始字符] [目标字符]”。
	在很多时候，我们想要快速地替换文本中的一些词汇，又或者把整个文本内容都进行替
	换，如果进行手工替换，难免工作量太大，尤其是需要处理大批量的内容时，进行手工替换更
	是不现实。这时，就可以先使用 cat 命令读取待处理的文本，然后通过管道符
	把这些文本内容传递给 tr 命令进行替换操作即可。例如，把某个文本内容中的英文全部替换为大写：
	[root@linuxprobe ~]# cat anaconda-ks.cfg | tr [a-z] [A-Z]
	
27、wc
	wc 命令用于统计指定文本的行数、字数、字节数，格式为“wc [参数] 文本”。
	Linux系统中的 wc 命令用于统计文本的行数、字数、字节数等。
	如果为了方便自己记住这个命令的作用，
	也可以联想到上厕所时好无聊，无聊到数完了手中的如厕读物上有多少行字。
	wc 的参数以及相应的作用如表所示:
		-l 只显示行数
		-w 只显示单词数
		-c 只显示字节数
	在 Linux 系统中， passwd 是用于保存系统账户信息的文件，要统计当前系统中有多少个
	用户，可以使用下面的命令来进行查询，是不是很神奇：
	[root@linuxprobe ~]# wc -l /etc/passwd
	38 /etc/passwd
	
28、stat
	stat 命令用于查看文件的具体存储信息和时间等信息，格式为“stat 文件名称”。
	stat 命令可以用于查看文件的存储信息和时间等信息，命令 stat anaconda-ks.cfg 会显示出
	文件的三种时间状态（已加粗）： Access、 Modify、 Change。这三种时间的区别将在下面的 touch
	命令中详细详解：
	[root@linuxprobe ~]# stat anaconda-ks.cfg
	File: ‘anaconda-ks.cfg’
	Size: 1213 Blocks: 8 IO Block: 4096 regular file
	Device: fd00h/64768d Inode: 68912908 Links: 1
	Access: (0600/-rw-------) Uid: ( 0/ root) Gid: ( 0/ root)
	Context: system_u:object_r:admin_home_t:s0
	Access: 2017-07-14 01:46:18.721255659 -0400
	Modify: 2017-05-04 15:44:36.916027026 -0400
	Change: 2017-05-04 15:44:36.916027026 -0400
	Birth: -
	
29、cut
	cut 命令用于按“列”提取文本字符，格式为“cut [参数] 文本”。
	在 Linux 系统中，如何准确地提取出最想要的数据，这也是我们应该重点学习的内容。
	一般而言，按基于“行”的方式来提取数据是比较简单的，只需要设置好要搜索的关键词即可。
	但是如果按列搜索，不仅要使用-f 参数来设置需要看的列数，还需要使用-d 参数来设置间隔符号。
	passwd 在保存用户数据信息时，用户信息的每一项值之间是采用冒号来间隔的，接下来我们使用
	下述命令尝试提取出 passwd 文件中的用户名信息，即提取以冒号（：）为间隔符号的第一列内容：
	[root@linuxprobe ~]# head -n 2 /etc/passwd
	root:x:0:0:root:/root:/bin/bash
	bin:x:1:1:bin:/bin:/sbin/nologin
	[root@linuxprobe ~]# cut -d: -f1 /etc/passwd
	root
	bin
	daemon
	adm
	lp
	
30、diff
	diff 命令用于比较多个文本文件的差异，格式为“diff [参数] 文件”。
	在使用 diff 命令时，不仅可以使用--brief 参数来确认两个文件是否不同，还可以使用-c 参
	数来详细比较出多个文件的差异之处，这绝对是判断文件是否被篡改的有力神器。例如，先
	使用 cat 命令分别查看 diff_A.txt 和 diff_B.txt 文件的内容，然后进行比较：
	[root@linuxprobe ~]# cat diff_A.txt
	Welcome to linuxprobe.com
	Red Hat certified
	Free Linux Lessons
	Professional guidance
	Linux Course
	[root@linuxprobe ~]# cat diff_B.txt
	Welcome tooo linuxprobe.com
	Red Hat certified
	Free Linux LeSSonS
	////////.....////////
	Professional guidance
	Linux Course
	接下来使用 diff --brief 命令显示比较后的结果，判断文件是否相同：
	[root@linuxprobe ~]# diff --brief diff_A.txt diff_B.txt
	Files diff_A.txt and diff_B.txt differ
	最后使用带有-c 参数的 diff 命令来描述文件内容具体的不同：
	[root@linuxprobe ~]# diff -c diff_A.txt diff_B.txt
	*** diff_A.txt 2017-08-30 18:07:45.230864626 +0800
	--- diff_B.txt 2017-08-30 18:08:52.203860389 +0800
	***************
	*** 1,5 ****
	! Welcome to linuxprobe.com
	Red Hat certified
	Professional guidance
	Linux Course
	--- 1,7 ----
	! Welcome tooo linuxprobe.com
	!
	Red Hat certified
	! Free Linux LeSSonS
	! ////////.....////////
	Professional guidance
	Linux Course
	
五、文件目录管理命令
31、touch
	touch 命令用于创建空白文件或设置文件的时间，格式为“touch [选项] [文件]”。
	在创建空白的文本文件方面，这个 touch 命令相当简捷，简捷到没有必要铺开去讲。
	比如， touch linuxprobe 命令可以创建出一个名为 linuxprobe 的空白文本文件。
	对 touch 命令来讲，有难度的操作主要是体现在设置文件内容的修改时间（mtime）、
	文件权限或属性的更改时间（ctime）与文件的读取时间（atime）上面。 
	touch 命令的参数及其作用如表 2-11 所示。
	表 2-11 touch 命令的参数及其作用
		-a 仅修改“读取时间”（atime）
		-m 仅修改“修改时间”（mtime）
		-d 同时修改 atime 与 mtime
	接下来，我们先使用 ls 命令查看一个文件的修改时间，然后修改这个文件，最后再通过 touch
	命令把修改后的文件时间设置成修改之前的时间（很多黑客就是这样做的呢）：
	[root@linuxprobe ~]# ls -l anaconda-ks.cfg
	-rw-------. 1 root root 1213 May 4 15:44 anaconda-ks.cfg
	[root@linuxprobe ~]# echo "Visit the LinuxProbe.com to learn linux skills" >>
	anaconda-ks.cfg
	[root@linuxprobe ~]# ls -l anaconda-ks.cfg
	-rw-------. 1 root root 1260 Aug 2 01:26 anaconda-ks.cfg
	[root@linuxprobe ~]# touch -d "2017-05-04 15:44" anaconda-ks.cfg
	[root@linuxprobe ~]# ls -l anaconda-ks.cfg
	-rw-------. 1 root root 1260 May 4 15:44 anaconda-ks.cfg
	
32、mkdir
	mkdir 命令用于创建空白的目录，格式为“mkdir [选项] 目录”
	在 Linux 系统中，文件夹是最常见的文件类型之一。除了能创建单个空白目录外， 
	mkdir命令还可以结合-p 参数来递归创建出具有嵌套叠层关系的文件目录。
	[root@linuxprobe ~]# mkdir linuxprobe
	[root@linuxprobe ~]# cd linuxprobe
	[root@linuxprobe linuxprobe]# mkdir -p a/b/c/d/e
	[root@linuxprobe linuxprobe]# cd a
	[root@linuxprobe a]# cd b
	[root@linuxprobe b]#
	
33、cp
	cp 命令用于复制文件或目录，格式为“cp [选项] 源文件 目标文件”。
	大家对文件复制操作应该不陌生，在 Linux 系统中，复制操作具体分为 3 种情况：
		➢ 如果目标文件是目录，则会把源文件复制到该目录中；
		➢ 如果目标文件也是普通文件，则会询问是否要覆盖它；
		➢ 如果目标文件不存在，则执行正常的复制操作。
	cp 命令的参数及其作用如表 2-12 所示。
	表 2-12 cp 命令的参数及其作用
		-p 保留原始文件的属性
		-d 若对象为“链接文件”，则保留该“链接文件”的属性
		-r 递归持续复制（用于目录）
		-i 若目标文件存在则询问是否覆盖
		-a 相当于-pdr（p、 d、 r 为上述参数）
	接下来，使用 touch 创建一个名为 install.log 的普通空白文件，然后将其复制为一份名为
	x.log 的备份文件，最后再使用 ls 命令查看目录中的文件：
	[root@linuxprobe ~]# touch install.log
	[root@linuxprobe ~]# cp install.log x.log
	[root@linuxprobe ~]# ls
	install.log x.log
	
34、mv
	mv 命令用于剪切文件或将文件重命名，格式为“mv [选项] 源文件 [目标路径|目标文件名]”。
	剪切操作不同于复制操作，因为它会默认把源文件删除掉，只保留剪切后的文件。
	如果在同一个目录中对一个文件进行剪切操作，其实也就是对其进行重命名：
	[root@linuxprobe ~]# mv x.log linux.log
	[root@linuxprobe ~]# ls
	install.log linux.log
	
35、rm
	rm 命令用于删除文件或目录，格式为“rm [选项] 文件”。
	在 Linux 系统中删除文件时，系统会默认向您询问是否要执行删除操作，
	如果不想总是看到这种反复的确认信息，可在 rm 命令后跟上-f 参数来强制删除。
	另外，想要删除一个目录，需要在 rm 命令后面一个-r 参数才可以，否则删除不掉。
	我们来尝试删除前面创建的 install.log和 linux.log 文件：
	[root@linuxprobe ~]# rm install.log
	rm: remove regular empty file ‘install.log’? y
	[root@linuxprobe ~]# rm -f linux.log
	[root@linuxprobe ~]# ls
	[root@linuxprobe ~]#
	
36、dd
	dd 命令用于按照指定大小和个数的数据块来复制文件或转换文件，格式为“dd [参数]”。
	dd 命令是一个比较重要而且比较有特色的一个命令，它能够让用户按照指定大小和个数
	的数据块来复制文件的内容。当然如果愿意的话，还可以在复制过程中转换其中的数据。 
	Linux系统中有一个名为/dev/zero 的设备文件，每次在课堂上解释它时都充满哲学理论的色彩。
	因为这个文件不会占用系统存储空间，但却可以提供无穷无尽的数据，因此可以使用它作为 dd
	命令的输入文件，来生成一个指定大小的文件。 dd 命令的参数及其作用如表 2-13 所示。
	表 2-13 dd 命令的参数及其作用
		if 输入的文件名称
		of 输出的文件名称
		bs 设置每个“块”的大小
		count 设置要复制“块”的个数
	例如我们可以用 dd 命令从/dev/zero 设备文件中取出一个大小为 560MB 的数据块，然后
	保存成名为 560_file 的文件。在理解了这个命令后，以后就能随意创建任意大小的文件了：
	[root@linuxprobe ~]# dd if=/dev/zero of=560_file count=1 bs=560M
	1+0 records in
	1+0 records out
	587202560 bytes (587 MB) copied, 27.1755 s, 21.6 MB/s
	dd 命令的功能也绝不仅限于复制文件这么简单。如果您想把光驱设备中的光盘制作成 iso 格
	式的镜像文件，在 Windows 系统中需要借助于第三方软件才能做到，但在 Linux 系统中可以直接
	使用 dd 命令来压制出光盘镜像文件，将它变成一个可立即使用的 iso 镜像：
	[root@linuxprobe ~]# dd if=/dev/cdrom of=RHEL-server-7.0-x86_64-LinuxProbe.Com.iso
	7311360+0 records in
	7311360+0 records out
	3743416320 bytes (3.7 GB) copied, 370.758 s, 10.1 MB/s
	考虑到有些读者会纠结 bs 块大小与 count 块个数的关系，下面举一个吃货的例子进行解释。
	假设小明的饭量（即需求）是一个固定的值，用来盛饭的勺子的大小即 bs 块大小，
	而用勺子盛饭的次数即 count 块个数。小明要想吃饱（满足需求），则需要在勺子大小（bs 块
	大小）与用勺子盛饭的次数（count 块个数）之间进行平衡。勺子越大，用勺子盛饭的次数就越少。
	由上可见， bs 与 count 都是用来指定容量的大小，只要能满足需求，可随意组合搭配方式。
	
37、file
	file 命令用于查看文件的类型，格式为“file 文件名”。
	在 Linux 系统中，由于文本、目录、设备等所有这些一切都统称为文件，而我们又不能
	单凭后缀就知道具体的文件类型，这时就需要使用 file 命令来查看文件类型了。
	[root@linuxprobe ~]# file anaconda-ks.cfg
	anaconda-ks.cfg: ASCII text
	[root@linuxprobe ~]# file /dev/sda
	/dev/sda: block special
	
六、打包压缩与搜索命令

38、tar
	tar 命令用于对文件进行打包压缩或解压，格式为“tar [选项] [文件]”。
	在 Linux 系统中，常见的文件格式比较多，其中主要使用的是.tar 或.tar.gz 或.tar.bz2 格式，
	我们不用担心格式太多而记不住，其实这些格式大部分都是由 tar 命令来生成的。
	tar 命令的参数及其作用如表 2-14 所示。
	表 2-14 tar 命令的参数及其作用
		-c 创建压缩文件
		-x 解开压缩文件
		-t 查看压缩包内有哪些文件
		-z 用 Gzip 压缩或解压
		-j 用 bzip2 压缩或解压
		-v 显示压缩或解压的过程
		-f 目标文件名
		-p 保留原始的权限与属性
		-P 使用绝对路径来压缩
		-C 指定解压到的目录
	首先， -c 参数用于创建压缩文件， -x 参数用于解压文件，因此这两个参数不能同时使用。
	其次， -z 参数指定使用 Gzip 格式来压缩或解压文件， -j 参数指定使用 bzip2 格式来压缩或解压文件。
	用户使用时则是根据文件的后缀来决定应使用何种格式参数进行解压。
	在执行某些压缩或解压操作时，可能需要花费数个小时，如果屏幕一直没有输出，您一方面不好判断打
	包的进度情况，另一方面也会怀疑电脑死机了，因此非常推荐使用-v 参数向用户不断显示压
	缩或解压的过程。 -C 参数用于指定要解压到哪个指定的目录。 -f 参数特别重要，它必须放到
	参数的最后一位，代表要压缩或解压的软件包名称。刘遄老师一般使用“tar -czvf 压缩包名
	称.tar.gz 要打包的目录”命令把指定的文件进行打包压缩；相应的解压命令为“tar -xzvf 压缩
	包名称.tar.gz”。下面我们来逐个演示下打包压缩与解压的操作。先使用 tar 命令把/etc 目录通
	过 gzip 格式进行打包压缩，并把文件命名为 etc.tar.gz：
	[root@linuxprobe ~]# tar -czvf etc.tar.gz /etc
	tar: Removing leading '/' from member names
	/etc/
	/etc/fstab
	/etc/crypttab
	/etc/mtab
	/etc/fonts/
	/etc/fonts/conf.d/
	/etc/fonts/conf.d/65-0-madan.conf
	/etc/fonts/conf.d/59-liberation-sans.conf
	/etc/fonts/conf.d/90-ttf-arphic-uming-embolden.conf
	/etc/fonts/conf.d/59-liberation-mono.conf
	/etc/fonts/conf.d/66-sil-nuosu.conf
	………………省略部分压缩过程信息………………
	接下来将打包后的压缩包文件指定解压到/root/etc 目录中（先使用 mkdir 命令来创建/root/etc 目录）：
	[root@linuxprobe ~]# mkdir /root/etc
	[root@linuxprobe ~]# tar -xzvf etc.tar.gz -C /root/etc
	etc/
	etc/fstab
	etc/crypttab
	etc/mtab
	etc/fonts/
	etc/fonts/conf.d/
	etc/fonts/conf.d/65-0-madan.conf
	etc/fonts/conf.d/59-liberation-sans.conf
	etc/fonts/conf.d/90-ttf-arphic-uming-embolden.conf
	etc/fonts/conf.d/59-liberation-mono.conf
	etc/fonts/conf.d/66-sil-nuosu.conf
	etc/fonts/conf.d/65-1-vlgothic-gothic.conf
	etc/fonts/conf.d/65-0-lohit-bengali.conf
	etc/fonts/conf.d/20-unhint-small-dejavu-sans.conf
	………………省略部分解压过程信息………………
	
39、grep
	grep 命令用于在文本中执行关键词搜索，并显示匹配的结果，格式为“grep [选项] [文件]”。
	grep 命令的参数及其作用如表 2-15 所示。
	表 2-15 grep 命令的参数及其作用
		-b 将可执行文件（binary）当作文本文件（text）来搜索
		-c 仅显示找到的行数
		-i 忽略大小写
		-n 显示行号
		-v 反向选择—仅列出没有“关键词”的行
	grep 命令是用途最广泛的文本搜索匹配工具，虽然有很多参数，但是大多数基本上都用不到。
	刘遄老师在总结了近 10 年的运维工作和培训教学的经验后，提出的本书的写作理念“去
	掉不实用”绝对不是信口开河。如果一名 IT 培训讲师的水平只能停留在“技术的搬运工”层
	面，而不能对优质技术知识进行提炼总结，那对他的学生来讲绝非好事。我们在这里只讲两
	个最最常用的参数： -n 参数用来显示搜索到信息的行号； -v 参数用于反选信息（即没有包含
	关键词的所有信息行）。这两个参数几乎能完成您日后 80%的工作需要，至于其他上百个参数，
	即使以后在工作期间遇到了，再使用 man grep 命令查询也来得及。
	在 Linux 系统中， /etc/passwd 文件是保存着所有的用户信息，而一旦用户的登录终端被
	设置成/sbin/nologin，则不再允许登录系统，因此可以使用 grep 命令来查找出当前系统中不允
	许登录系统的所有用户信息：
	[root@linuxprobe ~]# grep /sbin/nologin /etc/passwd
	bin:x:1:1:bin:/bin:/sbin/nologin
	daemon:x:2:2:daemon:/sbin:/sbin/nologin
	adm:x:3:4:adm:/var/adm:/sbin/nologin
	lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin
	mail:x:8:12:mail:/var/spool/mail:/sbin/nologin
	operator:x:11:0:operator:/root:/sbin/nologin
	………………省略部分输出过程信息………………
	
40、find
	find 命令用于按照指定条件来查找文件，格式为“find [查找路径] 寻找条件 操作”。
	本书中曾经多次提到“Linux 系统中的一切都是文件”，接下来就要见证这句话的分量了。
	在 Linux 系统中，搜索工作一般都是通过 find 命令来完成的，它可以使用不同的文件特性作
	为寻找条件（如文件名、大小、修改时间、权限等信息），一旦匹配成功则默认将信息显示到
	屏幕上。 find 命令的参数以及作用如表 2-16 所示。
	表 2-16 find 命令中的参数以及作用
		-name 匹配名称
		-perm 匹配权限（mode 为完全匹配， -mode 为包含即可）
		-user 匹配所有者
		-group 匹配所有组
		-mtime -n +n 匹配修改内容的时间（-n 指 n 天以内， +n 指 n 天以前）
		-atime -n +n 匹配访问文件的时间（-n 指 n 天以内， +n 指 n 天以前）
		-ctime -n +n 匹配修改文件权限的时间（-n 指 n 天以内， +n 指 n 天以前）
		-nouser 匹配无所有者的文件
		-nogroup 匹配无所有组的文件
		-newer f1 !f2 匹配比文件 f1 新但比 f2 旧的文件
		--type 匹配文件类型（后面的字母参数依次表示块设备b、目录d、字符设备c、管道p、链接文件l、文本文件f）
		b/d/c/p/l/f
		-size 匹配文件的大小（+50KB 为查找超过 50KB 的文件，而-50KB 为查找小于 50KB 的文件）
		-prune 忽略某个目录
		-exec …… {}\; 后面可跟用于进一步处理搜索结果的命令（下文会有演示）
	这里需要重点讲解一下-exec 参数重要的作用。这个参数用于把 find 命令搜索到的结果交
	由紧随其后的命令作进一步处理，它十分类似于第 3 章将要讲解的管道符技术，并且由于 find
	命令对参数的特殊要求，因此虽然 exec 是长格式形式，但依然只需要一个减号（-）。
	根据文件系统层次标准（Filesystem Hierarchy Standard）协议， Linux 系统中的配置文件
	会保存到/etc 目录中（详见第 6 章）。如果要想获取到该目录中所有以 host 开头的文件列表，
	可以执行如下命令：
	[root@linuxprobe ~]# find /etc -name "host*" -print
	/etc/avahi/hosts
	/etc/host.conf
	/etc/hosts
	/etc/hosts.allow
	/etc/hosts.deny
	/etc/selinux/targeted/modules/active/modules/hostname.pp
	/etc/hostname
	如果要在整个系统中搜索权限中包括 SUID 权限的所有文件（详见第 5 章），只需使用-
	4000 即可：
	[root@linuxprobe ~]# find / -perm -4000 -print
	/usr/bin/fusermount
	/usr/bin/su
	/usr/bin/umount
	/usr/bin/passwd
	/usr/sbin/userhelper
	/usr/sbin/usernetctl
	………………省略部分输出信息………………

注：
	进价实验：在整个文件系统中找出所有归属于linuxprobe用户的文件并复制到/root/findresult目录
	该实验的重点是"-exec {}  \;" 参数，其中的{}表示find命令搜索出的第一个文件，并且命令的结尾
	必须是"\;"。完成该实验的具体命令如下：
	[root@linuxprobe ~]# find / -user linuxprobe -exec cp -a {} /root/findresults/ \;
	
七、管道符、重定向与环境变量

41、输入输出重定向
	既然我们已经在上一章学完了几乎所有基础且常用的 Linux 命令，那么接下来的任务就
	是把多个 Linux 命令适当地组合到一起，使其协同工作，以便我们更加高效地处理数据。
	要做到这一点，就必须搞明白命令的输入重定向和输出重定向的原理。
	简而言之，输入重定向是指把文件导入到命令中，而输出重定向则是指把原本要输出到
	屏幕的数据信息写入到指定文件中。在日常的学习和工作中，相较于输入重定向，我们使用
	输出重定向的频率更高，所以又将输出重定向分为了标准输出重定向和错误输出重定向两种
	不同的技术，以及清空写入与追加写入两种模式。听起来就很玄妙？ 刘遄老师接下来将慢慢
	道来。
		➢ 标准输入重定向（STDIN，文件描述符为 0）：默认从键盘输入，也可从其他文件或命
		令中输入。
		➢ 标准输出重定向（STDOUT，文件描述符为 1）：默认输出到屏幕。
		➢ 错误输出重定向（STDERR，文件描述符为 2）：默认输出到屏幕。
	比如我们分别查看两个文件的属性信息，其中第二个文件是不存在的，虽然针对这两个
	文件的操作都分别会在屏幕上输出一些数据信息，但这两个操作的差异其实很大：
	[root@linuxprobe ~]# touch linuxprobe
	[root@linuxprobe ~]# ls -l linuxprobe
	-rw-r--r--. 1 root root 0 Aug 5 05:35 linuxprobe
	[root@linuxprobe ~]# ls -l xxxxxx
	ls: cannot access xxxxxx: No such file or directory
	在上述命令中，名为 linuxprobe 的文件是存在的，输出信息是该文件的一些相关权限、
	所有者、所属组、文件大小及修改时间等信息，这也是该命令的标准输出信息。而名为 xxxxxx
	的第二个文件是不存在的，因此在执行完 ls 命令之后显示的报错提示信息也是该命令的错误
	输出信息。那么，要想把原本输出到屏幕上的数据转而写入到文件当中，就要区别对待这两
	种输出信息。
	对于输入重定向来讲，用到的符号及其作用如表 3-1 所示。
	表 3-1 输入重定向中用到的符号及其作用
		命令 < 文件 			将文件作为命令的标准输入
		命令 << 分界符 			从标准输入中读入，直到遇见分界符才停止
		命令 < 文件1 > 文件2	将文件1作为命令的标准输入并将标准输出到文件2
	对于输出重定向来讲，用到的符号及其作用如表 3-2 所示。
	表 3-2 输出重定向中用到的符号及其作用
		命令 > 文件 		将标准输出重定向到一个文件中（清空原有文件的数据）
		命令 2> 文件 		将错误输出重定向到一个文件中（清空原有文件的数据）
		命令 >> 文件 		将标准输出重定向到一个文件中（追加到原有内容的后面）
		命令 2>> 文件 		将错误输出重定向到一个文件中（追加到原有内容的后面）
		命令 >> 文件 2>&1
		或					将标准输出与错误输出共同写入到文件中（追加到原有内容的后面）
		命令 &>> 文件
	对于重定向中的标准输出模式，可以省略文件描述符1不写，而错误输出模式的文件描述符2是必须要写的。
	我们先来小试牛刀。通过标准输出重定向将 man bash 命令原本要输出到屏幕的信息
	写入到文件 readme.txt 中，然后显示 readme.txt 文件中的内容。具体命令如下：
	[root@linuxprobe ~]# man bash > readme.txt
	[root@linuxprobe ~]# cat readme.txt
	BASH(1) General Commands Manual BASH(1)
	NAME
	bash - GNU Bourne-Again SHell
	SYNOPSIS
	bash [options] [file]
	COPYRIGHT
	Bash is Copyright (C) 1989-2011 by the Free Software Foundation, Inc.
	DESCRIPTION
	Bash is an sh-compatible command language interpreter that executes
	commands read from the standard input or from a file. Bash also incor‐
	porates useful features from the Korn and C shells (ksh and csh).
	Bash is intended to be a conformant implementation of the Shell and
	Utilities portion of the IEEE POSIX specification (IEEE Standard
	1003.1). Bash can be configured to be POSIX-conformant by default.
	………………省略部分输出信息………………
	有没有感觉到很方便呢？我们接下来尝试输出重定向技术中的覆盖写入与追加写入这
	两种不同模式带来的变化。首先通过覆盖写入模式向 readme.txt 文件写入一行数据（该文件
	中包含上一个实验的 man 命令信息），然后再通过追加写入模式向文件再写入一次数据，其
	命令如下：
	[root@linuxprobe ~]# echo "Welcome to LinuxProbe.Com" > readme.txt
	[root@linuxprobe ~]# echo "Quality linux learning materials" >> readme.txt
	在执行 cat 命令之后，可以看到如下所示的文件内容：
	[root@linuxprobe ~]# cat readme.txt
	Welcome to LinuxProbe.Com
	Quality linux learning materials
	虽然都是输出重定向技术，但是不同命令的标准输出和错误输出还是有区别的。
	例如查看当前目录中某个文件的信息，这里以 linuxprobe 文件为例。
	因为这个文件是真实存在的，因此使用标准输出即可将原本要输出到屏幕的信息写入到文件中，
	而错误的输出重定向则依然把信息输出到了屏幕上。
	[root@linuxprobe ~]# ls -l linuxprobe
	-rw-r--r--. 1 root root 0 Mar 1 13:30 linuxprobe
	[root@linuxprobe ~]# ls -l linuxprobe > /root/stderr.txt
	[root@linuxprobe ~]# ls -l linuxprobe 2> /root/stderr.txt
	-rw-r--r--. 1 root root 0 Mar 1 13:30 linuxprobe
	如果想把命令的报错信息写入到文件，该怎么操作呢？当用户在执行一个自动化的 Shell
	脚本时，这个操作会特别有用，而且特别实用，因为它可以把整个脚本执行过程中的报错信
	息都记录到文件中，便于安装后的排错工作。接下来我们以一个不存在的文件进行实验演示：
	[root@linuxprobe ~]# ls -l xxxxxx
	cannot access xxxxxx: No such file or directory
	[root@linuxprobe ~]# ls -l xxxxxx > /root/stderr.txt
	cannot access xxxxxx: No such file or directory
	[root@linuxprobe ~]# ls -l xxxxxx 2> /root/stderr.txt
	[root@linuxprobe ~]# cat /root/stderr.txt
	ls: cannot access xxxxxx: No such file or directory
	输入重定向相对来说有些冷门，在工作中遇到的概率会小一点。输入重定向的作用是把
	文件直接导入到命令中。接下来使用输入重定向把 readme.txt 文件导入给 wc -l 命令
	下文件中的内容行数。
	[root@linuxprobe ~]# wc -l < readme.txt
	2
	
42、管道命令符
	按下键盘上的 Shift+\键即可输入管道符，其执行格式为“命令 A | 命令 B”。 
	管道命令符的作用也可以用一句话来概括“把前一个命令原本要输出到屏幕的标准正常数据当作是
	后一个命令的标准输入”。
	我们通过匹配关键词/sbin/nologin 找出了所有被限制登录系统的用户。在学完本节内容后，完全可以把下面这两条命令合并为一条：
	➢ 找出被限制登录用户的命令是 grep "/sbin/nologin" /etc/passwd；
	➢ 统计文本行数的命令则是 wc -l。
	现在要做的就是把搜索命令的输出值传递给统计命令，即把原本要输出到屏幕的用户信
	息列表再交给 wc 命令作进一步的加工，因此只需要把管道符放到两条命令之间即可，具体如
	下。这简直是太方便了！
	[root@linuxprobe ~]# grep "/sbin/nologin" /etc/passwd | wc -l
	33
	这个管道符就像一个法宝，我们可以将它套用到其他不同的命令上，比如用翻页的形式
	查看/etc 目录中的文件列表及属性信息（这些内容默认会一股脑儿地显示到屏幕上，根本看
	不清楚）：
	[root@linuxprobe ~]# ls -l /etc/ | more
	total 1400
	drwxr-xr-x. 3 root root 97 Jul 10 17:26 abrt
	-rw-r--r--. 1 root root 16 Jul 10 17:36 adjtime
	-rw-r--r--. 1 root root 1518 Jun 7 2013 aliases
	-rw-r--r--. 1 root root 12288 Jul 10 09:38 aliases.db
	drwxr-xr-x. 2 root root 49 Jul 10 17:26 alsa
	drwxr-xr-x. 2 root root 4096 Jul 10 17:31 alternatives
	-rw-------. 1 root root 541 Jan 28 2017 anacrontab
	-rw-r--r--. 1 root root 55 Jan 29 2017 asound.conf
	-rw-r--r--. 1 root root 1 Jan 29 2017 at.deny
	drwxr-xr-x. 2 root root 31 Jul 10 17:27 at-spi2
	drwxr-x---. 3 root root 41 Jul 10 17:26 audisp
	drwxr-x---. 3 root root 79 Jul 10 17:37 audit
	drwxr-xr-x. 4 root root 94 Jul 10 17:26 avahi
	--More--
	在修改用户密码时，通常都需要输入两次密码以进行确认，这在编写自动化脚本时将成
	为一个非常致命的缺陷。通过把管道符和 passwd 命令的--stdin 参数相结合，我们可以用一条
	命令来完成密码重置操作：
	[root@linuxprobe ~]# echo "linuxprobe" | passwd --stdin root
	Changing password for user root.
	passwd: all authentication tokens updated successfully.
	大家是不是觉得管道符命令有些相见恨晚？管道符的玩法还有很多，比如，在发送电子
	邮件时，默认采用交互式的方式来进行，我们完全可以利用一条结合了管道符的命令语句，
	把编辑好的内容与标题一起“打包”， 最终用这一条命令实现邮件的发送。
	[root@linuxprobe ~]# echo "Content" | mail -s "Subject" linuxprobe
	[root@linuxprobe ~]# su - linuxprobe
	Last login: Fri Jul 10 09:44:07 CST 2017 on :0
	[linuxprobe@linuxprobe ~]$ mail
	Heirloom Mail version 12.5 7/5/10. Type ? for help.
	"/var/spool/mail/linuxprobe": 1 message 1 new
	>N 1 root Sun Aug 30 17:33 18/578 "Subject"
	如果读者是一名 Linux 新手，可能会觉得上面的命令组合已经十分复杂了，但是有过
	运维经验的读者又会感觉如隔靴挠痒般不过瘾，他们希望能将这样方便的命令写得更高级
	一些，功能更强大一些。比如通过重定向技术能够一次性地把多行信息打包输入或输出，
	让日常工作更有效率。为了大家对我们这本书的捧场，刘遄老师当然要义不容辞地把技术
	拱手奉上。
	下面这条自造的命令就结合使用了 mail 邮件命令与输入重定向的分界符，其目的是让用
	户一直输入内容，直到用户输入了其自定义的分界符时，才结束输入。
	[root@linuxprobe ~]# mail -s "Readme" root@linuxprobe.com << over
	> I think linux is very practical
	> I hope to learn more
	> can you teach me ?
	> over
	[root@linuxprobe ~]#
	当然，大家千万不要误以为管道命令符只能在一个命令组合中使用一次，我们完全可以
	这样使用：“命令 A | 命令 B | 命令 C”。为了帮助读者进一步理解管道符的作用，刘遄老师在
	讲课时经常会把管道符描述成“任意门”。想必大家小时候都看过“哆啦 A 梦”动画片吧。哆
	啦 A 梦（也就是我们常称的机器猫）经常为了取悦大雄而从口袋中掏出一件件宝贝，其中好
	多次就用到了任意门这个道具。其实，管道符就好像是用于实现数据穿越的任意门，可以帮
	我们提高工作效率，完成之前不敢想象的复杂工作。
	
43、命令行的通配符
	大家可能都遇到过提笔忘字的尴尬，作为 Linux 运维人员，我们有时候也会遇到明明一
	个文件的名称就在嘴边但就是想不起来的情况。如果就记得一个文件的开头几个字母，想遍
	历查找出所有以这个关键词开头的文件，该怎么操作呢？又比如，假设想要批量查看所有硬
	盘文件的相关权限属性，一种方式是这样的：
	[root@linuxprobe ~]# ls -l /dev/sda
	brw-rw----. 1 root disk 8, 0 May 4 15:55 /dev/sda
	[root@linuxprobe ~]# ls -l /dev/sda1
	brw-rw----. 1 root disk 8, 1 May 4 15:55 /dev/sda1
	[root@linuxprobe ~]# ls -l /dev/sda2
	brw-rw----. 1 root disk 8, 2 May 4 15:55 /dev/sda2
	[root@linuxprobe ~]# ls -l /dev/sda3
	ls: cannot access /dev/sda3: No such file or directory
	幸亏我的硬盘文件和分区只有 3 个，要是有几百个，估计需要花费一天的时间来忙这个
	事情了。由此可见，这种方式的效率确实很低。虽然我们在第 6 章才会讲解 Linux 系统的存
	储结构和 FHS，但现在我们应该能看出一些简单规律了。比如，这些硬盘设备文件都是以 sda
	开头并且存放到了/dev 目录中，这样一来，即使我们不知道硬盘的分区编号和具体分区的个数，
	也可以使用通配符来搞定。顾名思义，通配符就是通用的匹配信息的符号，比如星号（*）代
	表匹配零个或多个字符，问号（?）代表匹配单个字符，中括号内加上数字[0-9]代表匹配 0～
	9 之间的单个数字的字符，而中括号内加上字母[abc]则是代表匹配 a、 b、 c 三个字符中的任意
	一个字符。俗话讲“百闻不如一见，看书不如实验”，下面我们就来匹配所有在/dev 目录中且
	以 sda 开头的文件：
	[root@linuxprobe ~]# ls -l /dev/sda*
	brw-rw----. 1 root disk 8, 0 May 4 15:55 /dev/sda
	brw-rw----. 1 root disk 8, 1 May 4 15:55 /dev/sda1
	brw-rw----. 1 root disk 8, 2 May 4 15:55 /dev/sda2
	如果只想查看文件名为 sda 开头，但是后面还紧跟其他某一个字符的文件的相关信息，
	该怎么操作呢？这时就需要用到问号来进行通配了。
	[root@linuxprobe ~]# ls -l /dev/sda?
	brw-rw----. 1 root disk 8, 1 May 4 15:55 /dev/sda1
	brw-rw----. 1 root disk 8, 2 May 4 15:55 /dev/sda2
	除了使用[0-9]来匹配 0~9 之间的单个数字，也可以用[135]这样的方式仅匹配这三个指定
	数字中的一个，若没有匹配到，则不会显示出来：
	[root@linuxprobe ~]# ls -l /dev/sda[0-9]
	brw-rw----. 1 root disk 8, 1 May 4 15:55 /dev/sda1
	brw-rw----. 1 root disk 8, 2 May 4 15:55 /dev/sda2
	[root@linuxprobe ~]# ls -l /dev/sda[135]
	brw-rw----. 1 root disk 8, 1 May 4 15:55 /dev/sda1
	
44、常用的转义字符
	为了能够更好地理解用户的表达， Shell 解释器还提供了特别丰富的转义字符来处理输入
	的特殊数据。刘遄老师以近十年的工作和培训为基础，愣是用了两周时间从数十个转义字符
	中提炼出了 4 个最常用的转义字符！这件事情也让我深刻反省了很长时间。原本认为图书写
	的越厚，作者越是大牛，现在发现这种观念完全是错误的，希望读者在读完本书后能体会到
	刘遄老师的用心付出。
	4 个最常用的转义字符如下所示。
		➢ 反斜杠（\）：使反斜杠后面的一个变量变为单纯的字符串。
		➢ 单引号（''）：转义其中所有的变量为单纯的字符串。
		➢ 双引号（""）：保留其中的变量属性，不进行转义处理。
		➢ 反引号（``）：把其中的命令执行后返回结果。
	我们先定义一个名为 PRICE 的变量并赋值为 5，然后输出以双引号括起来的字符串与变
	量信息：
	[root@linuxprobe ~]# PRICE=5
	[root@linuxprobe ~]# echo "Price is $PRICE"
	Price is 5
	接下来，我们希望能够输出“Price is $5”，即价格是 5 美元的字符串内容，但碰巧美元符
	号与变量提取符号合并后的$$作用是显示当前程序的进程 ID 号码，于是命令执行后输出的内
	容并不是我们所预期的：
	[root@linuxprobe ~]# echo "Price is $$PRICE"
	Price is 3767PRICE
	要想让第一个“$”乖乖地作为美元符号，那么就需要使用反斜杠（\）来进行转义，将这
	个命令提取符转义成单纯的文本，去除其特殊功能。
	[root@linuxprobe ~]# echo "Price is \$$PRICE"
	Price is $5
	而如果只需要某个命令的输出值时，可以像`命令`这样，将命令用反引号括起来，达到预
	期的效果。例如，将反引号与 uname -a 命令结合，然后使用 echo 命令来查看本机的 Linux 版
	本和内核信息：
	[root@linuxprobe ~]# echo `uname -a`
	Linux linuxprobe.com 3.10.0-123.el7.x86_64 #1 SMP Mon May 5 11:16:57 EDT 2017
	x86_64 x86_64 x86_64 GNU/Linux
	
45、重要的环境变量
	变量是计算机系统用于保存可变值的数据类型。在 Linux 系统中，变量名称一般都是大写的，
	这是一种约定俗成的规范。我们可以直接通过变量名称来提取到对应的变量值。
	Linux系统中的环境变量是用来定义系统运行环境的一些参数，比如每个用户不同的家目录、邮件
	存放位置等。
	原因其实不言而喻—要想让 Linux 系统能够正常运行并且为用户提供服务，需要数百个环
	境变量来协同工作，我们没有必要逐一查看、学习每一个变量，而是应该在有限的篇幅中精
	讲最重要的内容。
	为了通过环境变量帮助 Linux 系统构建起能够为用户提供服务的工作运行环境，需要数
	百个变量协同工作才能完成。您当然没有必要去把每一个变量都看一遍，而应该在最宝贵的
	书籍中为读者精讲最重要的内容。为了更好地帮助大家理解变量的作用，刘遄老师给大家举
	个例子。
	前文中曾经讲到，在 Linux 系统中一切都是文件， Linux 命令也不例外。
	那么，在用户执行了一条命令之后， Linux 系统中到底发生了什么事情呢？
	简单来说，命令在 Linux 中的执行分为 4 个步骤。
	第一步：判断用户是否以绝对路径或相对路径的方式输入命令（如/bin/ls），如果是的话
		则直接执行。
	第二步： Linux 系统检查用户输入的命令是否为“别名命令”，即用一个自定义的命令
		名称来替换原本的命令名称。可以用 alias 命令来创建一个属于自己的命令别名，格式为
		“alias 别名=命令”。若要取消一个命令别名，则是用 unalias 命令，格式为“unalias 别名”。
		我们之前在使用 rm 命令删除文件时，Linux 系统都会要求我们再确认是否执行删除操作，
		其实这就是 Linux 系统为了防止用户误删除文件而特意设置的 rm 别名命令，接下来我们
		把它取消掉：
		[root@linuxprobe ~]# ls
		anaconda-ks.cfg Documents initial-setup-ks.cfg Pictures Templates
		Desktop Downloads Music Public Videos
		[root@linuxprobe ~]# rm anaconda-ks.cfg
		rm: remove regular file ‘anaconda-ks.cfg’? y
		[root@linuxprobe~]# alias rm
		alias rm='rm -i'
		[root@linuxprobe ~]# unalias rm
		[root@linuxprobe ~]# rm initial-setup-ks.cfg
		[root@linuxprobe ~]#
	第三步： Bash 解释器判断用户输入的是内部命令还是外部命令。内部命令是解释器内部
		的指令，会被直接执行；而用户在绝大部分时间输入的是外部命令，这些命令交由步骤 4 继
		续处理。可以使用“type 命令名称”来判断用户输入的命令是内部命令还是外部命令。
	第四步：系统在多个路径中查找用户输入的命令文件，而定义这些路径的变量叫作 PATH， 可
		以简单地把它理解成是“解释器的小助手”，作用是告诉 Bash 解释器待执行的命令可能存放
		的位置，然后 Bash 解释器就会乖乖地在这些位置中逐个查找。 PATH 是由多个路径值组成的
		变量，每个路径值之间用冒号间隔，对这些路径的增加和删除操作将影响到 Bash 解释器对
		Linux 命令的查找。
	[root@linuxprobe ~]# echo $PATH
	/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin
	[root@linuxprobe ~]# PATH=$PATH:/root/bin
	[root@linuxprobe ~]# echo $PATH
	/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:/root/bin
	这里有比较经典的问题：“为什么不能将当前目录（.）添加到 PATH 中呢? ” 原因是，
	尽管可以将当前目录（.）添加到 PATH 变量中，从而在某些情况下可以让用户免去输入命令
	所在路径的麻烦。但是，如果黑客在比较常用的公共目录/tmp 中存放了一个与 ls 或 cd 命令同
	名的木马文件，而用户又恰巧在公共目录中执行了这些命令，那么就极有可能中招了。
	所以，作为一名态度谨慎、有经验的运维人员，在接手了一台 Linux 系统后一定会在执
	行命令前先检查 PATH 变量中是否有可疑的目录，另外读者从前面的 PATH 变量示例中是否
	也感觉到环境变量特别有用呢。我们可以使用 env 命令来查看到 Linux 系统中所有的环境变
	量，而刘遄老师为您精挑细选出了最重要的 10 个环境变量，如表 3-3 所示。
	表 3-3 Linux 系统中最重要的 10 个环境变量
		HOME 用户的主目录（即家目录）
		SHELL 用户在使用的 Shell 解释器名称
		HISTSIZE 输出的历史命令记录条数
		HISTFILESIZE 保存的历史命令记录条数
		MAIL 邮件保存路径
		LANG 系统语言、语系名称
		RANDOM 生成一个随机数字
		PS1 Bash 解释器的提示符
		PATH 定义解释器搜索用户执行命令的路径
		EDITOR 用户默认的文本编辑器
	Linux 作为一个多用户多任务的操作系统，能够为每个用户提供独立的、合适的工作运行
	环境，因此，一个相同的变量会因为用户身份的不同而具有不同的值。例如，我们使用下述命
	令来查看 HOME 变量在不同用户身份下都有哪些值：
	[root@linuxprobe ~]# echo $HOME
	/root
	[root@linuxprobe ~]# su - linuxprobe
	Last login: Fri Feb 27 19:49:57 CST 2017 on pts/0
	[linuxprobe@linuxprobe ~]$ echo $HOME
	/home/linuxprobe
	其实变量是由固定的变量名与用户或系统设置的变量值两部分组成的，我们完全可以自
	行创建变量，来满足工作需求。例如设置一个名称为 WORKDIR 的变量，方便用户更轻松地
	进入一个层次较深的目录：
	[root@linuxprobe ~]# mkdir /home/workdir
	[root@linuxprobe ~]# WORKDIR=/home/workdir
	[root@linuxprobe ~]# cd $WORKDIR
	[root@linuxprobe workdir]# pwd
	/home/workdir
	但是，这样的变量不具有全局性，作用范围也有限，默认情况下不能被其他用户使用。
	如果工作需要，可以使用 export 命令将其提升为全局变量，这样其他用户也就可以使用它了：
	[root@linuxprobe workdir]# su linuxprobe
	Last login: Fri Mar 20 20:52:10 CST 2017 on pts/0
	[linuxprobe@linuxprobe ~]$ cd $WORKDIR
	[linuxprobe@linuxprobe ~]$ echo $WORKDIR
	[linuxprobe@linuxprobe ~]$ exit
	[root@linuxprobe ~]# export WORKDIR
	[root@linuxprobe ~]# su linuxprobe
	Last login: Fri Mar 20 21:52:10 CST 2017 on pts/0
	[linuxprobe@linuxprobe ~]$ cd $WORKDIR
	[linuxprobe@linuxprobe workdir]$ pwd
	/home/workdir
