一、vim文本编辑器
		每当在讲课时遇到需要让学生记住的知识点时，为了能让他们打起精神来，我都会突
	然提高嗓门，因此有句话他们记得尤其深刻：“在 Linux 系统中一切都是文件，而配置一
	个服务就是在修改其配置文件的参数”。而且在日常工作中大家也肯定免不了要编写文档，
	这些工作都是通过文本编辑器来完成的。刘遄老师写作本书的目的是让读者切实掌握
	Linux 系统的运维方法，而不是仅仅停留在“会用某个操作系统”的层面上，所以我们这
	里选择使用 Vim 文本编辑器，它默认会安装在当前所有的 Linux 操作系统上，是一款超棒
	的文本编辑器。
	Vim 之所以能得到广大厂商与用户的认可，原因在于 Vim 编辑器中设置了三种模式—命令
	模式、末行模式和编辑模式，每种模式分别又支持多种不同的命令快捷键，这大大提高了工
	作效率，而且用户在习惯之后也会觉得相当顺手。要想高效率地操作文本，就必须先搞清这
	三种模式的操作区别以及模式之间的切换方法
		➢ 命令模式：控制光标移动，可对文本进行复制、粘贴、删除和查找等工作。
		➢ 输入模式：正常的文本录入。
		➢ 末行模式：保存或退出文档，以及设置编辑环境。
	在每次运行 Vim 编辑器时，默认进入命令模式，此时需要先切换到输入模式后再进行文
	档编写工作，而每次在编写完文档后需要先返回命令模式，然后再进入末行模式，执行文档
	的保存或退出操作。在 Vim 中，无法直接从输入模式切换到末行模式。 Vim 编辑器中内置的
	命令有成百上千种用法，为了能够帮助读者更快地掌握 Vim 编辑器， 
	表 4-1 总结了在命令模式中最常用的一些命令
				Vim 中常用的命令
		命令	 	作用
		dd 		删除（剪切）光标所在整行
		5dd 	删除（剪切）从光标处开始的 5 行
		yy 		复制光标所在整行
		5yy 	复制从光标处开始的 5 行
		n 		显示搜索命令定位到的下一个字符串
		N 		显示搜索命令定位到的上一个字符串
		u 		撤销上一步的操作
		p 		将之前删除（dd）或复制（yy）过的数据粘贴到光标后面
	
		末行模式主要用于保存或退出文件，以及设置 Vim 编辑器的工作环境，还可以让用户执
	行外部的 Linux 命令或跳转到所编写文档的特定行数。
	要想切换到末行模式，在命令模式中输入一个冒号就可以了。
	末行模式中可用的命令如表 4-2 所示。
			表 4-2 末行模式中可用的命令
		命令			作用
		:w 				保存
		:q 				退出
		:q! 			强制退出（放弃对文档的修改内容）
		:wq! 			强制保存退出
		:set nu 		显示行号
		:set nonu 		不显示行号
		:命令 			执行该命令
		:整数 			跳转到该行
		:s/one/two 		将当前光标所在行的第一个 one 替换成 two
		:s/one/two/g 	将当前光标所在行的所有 one 替换成 two
		:%s/one/two/g 	将全文中的所有 one 替换成 two
		?字符串 		在文本中从下至上搜索该字符串
		/字符串 		在文本中从上至下搜索该字符串
		:noh			去除搜索匹配字符的高亮背景
		（或:nohlsearch）			
		
练习一：配置主机名
	为了便于在局域网中查找某台特定的主机，或者对主机进行区分，除了要有 IP 地址外，
	还要为主机配置一个主机名，主机之间可以通过这个类似于域名的名称来相互访问。在 Linux
	系统中，主机名大多保存在/etc/hostname 文件中，接下来将/etc/hostname 文件的内容修改为
	“linuxprobe.com”，步骤如下。
	第一步：使用 Vim 编辑器修改“/etc/hostname”主机名称文件。
	第二步：把原始主机名称删除后追加“linuxprobe.com”。注意，使用 Vim 编辑器修改主
	机名称文件后，要在末行模式下执行:wq!命令才能保存并退出文档。
	第三步：保存并退出文档，然后使用 hostname 命令检查是否修改成功。
	[root@linuxprobe ~]# vim /etc/hostname
	linuxprobe.com
	hostname 命令用于查看当前的主机名称，但有时主机名称的改变不会立即同步到系统中，
	所以如果发现修改完成后还显示原来的主机名称，可重启虚拟机后再行查看：
	[root@linuxprobe ~]# hostname
	linuxprobe.com
	
练习二：配置网卡信息
		网卡 IP 地址配置的是否正确是两台服务器是否可以相互通信的前提。在 Linux 系统中，
	一切都是文件，因此配置网络服务的工作其实就是在编辑网卡配置文件，因此这个小任务不
	仅可以帮助您练习使用 Vim 编辑器，而且也为您后面学习 Linux 中的各种服务配置打下了坚
	实的基础。当您认真学习完本书后，一定会特别有成就感，因为本书前面的基础部分非常扎
	实，而后面内容则具有几乎一致的网卡 IP 地址和运行环境，从而确保您全身心地投入到各类
	服务程序的学习上，而不用操心系统环境的问题。
		如果您具备一定的运维经验或者熟悉早期的 Linux 系统，则在学习本书时会遇到一些不
	容易接受的差异变化。在 RHEL 5、 RHEL 6 中，网卡配置文件的前缀为 eth，第 1 块网卡为
	eth0，第 2 块网卡为 eth1；以此类推。而在 RHEL 7 中，网卡配置文件的前缀则以 ifcfg 开始，
	加上网卡名称共同组成了网卡配置文件的名字，例如 ifcfg-eno16777736；好在除了文件名变
	化外也没有其他大的区别。
		现在有一个名称为 ifcfg-eno16777736 的网卡设备，我们将其配置为开机自启动，并且 IP
	地址、子网、网关等信息由人工指定，其步骤应该如下所示。
	第一步：首先切换到/etc/sysconfig/network-scripts 目录中（存放着网卡的配置文件）。
	第二步：使用 Vim 编辑器修改网卡文件 ifcfg-eno16777736，逐项写入下面的配置参数并
	保存退出。由于每台设备的硬件及架构是不一样的，因此请读者使用 ifconfig 命令自行确认各
	自网卡的默认名称。
		➢ 设备类型： TYPE=Ethernet
		➢ 地址分配模式： BOOTPROTO=static
		➢ 网卡名称： NAME=eno16777736
		➢ 是否启动： ONBOOT=yes
		➢ IP 地址： IPADDR=192.168.10.10
		➢ 子网掩码： NETMASK=255.255.255.0
		➢ 网关地址： GATEWAY=192.168.10.1
		➢ DNS 地址： DNS1=192.168.10.1
	第三步：重启网络服务并测试网络是否联通。
	进入到网卡配置文件所在的目录，然后编辑网卡配置文件，在其中填入下面的信息：
	[root@linuxprobe ~]# cd /etc/sysconfig/network-scripts/
	[root@linuxprobe network-scripts]# vim ifcfg-eno16777736
	TYPE=Ethernet
	BOOTPROTO=static
	NAME=eno16777736
	ONBOOT=yes
	IPADDR=192.168.10.10
	NETMASK=255.255.255.0
	GATEWAY=192.168.10.1
	DNS1=192.168.10.1
	执行重启网卡设备的命令（在正常情况下不会有提示信息），然后通过 ping 命令测试网络能否联通。
	由于在 Linux 系统中 ping 命令不会自动终止，因此需要手动按下 Ctrl-c 键来强行结束进程。
	[root@linuxprobe network-scripts]# systemctl restart network
	[root@linuxprobe network-scripts]# ping 192.168.10.10
	PING 192.168.10.10 (192.168.10.10) 56(84) bytes of data.
	64 bytes from 192.168.10.10: icmp_seq=1 ttl=64 time=0.081 ms
	64 bytes from 192.168.10.10: icmp_seq=2 ttl=64 time=0.083 ms
	64 bytes from 192.168.10.10: icmp_seq=3 ttl=64 time=0.059 ms
	64 bytes from 192.168.10.10: icmp_seq=4 ttl=64 time=0.097 ms
	^C
	--- 192.168.10.10 ping statistics ---
	4 packets transmitted, 4 received, 0% packet loss, time 2999ms
	rtt min/avg/max/mdev = 0.059/0.080/0.097/0.013 ms
	
练习二: 配置yum软件仓库
		本书前面讲到， Yum 软件仓库的作用是为了进一步简化 RPM 管理软件的难度以及自动分析
	所需软件包及其依赖关系的技术。可以把 Yum 想象成是一个硕大的软件仓库，里面保存有几乎所
	有常用的工具，而且只需要说出所需的软件包名称，系统就会自动为您搞定一切。
	既然要使用 Yum 软件仓库，就要先把它搭建起来，然后将其配置规则确定好才行。鉴于
	第 6 章才会讲解 Linux 的存储结构和设备挂载操作，所以我们当前还是将重心放到 Vim 编辑
	器的学习上。如果遇到看不懂的参数也不要紧，后面章节会单独讲解。搭建并配置 Yum 软件
	仓库的大致步骤如下所示。
	第一步：进入到/etc/yum.repos.d/目录中（因为该目录存放着 Yum 软件仓库的配置文件）。
	
	第二步： 使用 Vim 编辑器创建一个名为 rhel7.repo 的新配置文件（文件名称可随意，但后
	缀必须为.repo），逐项写入下面加粗的配置参数并保存退出（不要写后面的中文注释）。
		➢ [rhel-media]： Yum 软件仓库唯一标识符，避免与其他仓库冲突。
		➢ name=linuxprobe： Yum 软件仓库的名称描述，易于识别仓库用处。
		➢ baseurl=file:///media/cdrom： 提供的方式包括 FTP（ftp://..）、 HTTP（http://..）、本地（file:///..）。
		➢ enabled=1： 设置此源是否可用； 1 为可用， 0 为禁用。
		➢ gpgcheck=1： 设置此源是否校验文件； 1 为校验， 0 为不校验。
		➢ gpgkey=file://media/cdrom/RPM-GPG-KEY-redhat-release： 若上面参数开启校验，那么请指定公钥文件地址。
	第三步：按配置参数的路径挂载光盘，并把光盘挂载信息写入到/etc/fstab 文件中。
	第四步：使用“yum install httpd -y”命令检查 Yum 软件仓库是否已经可用。
	进入/etc/yum.repos.d 目录中后创建 Yum 配置文件：
	[root@linuxprobe ~]# cd /etc/yum.repos.d/
	[root@linuxprobe yum.repos.d]# vim rhel7.repo
	[rhel7]
	name=rhel7
	baseurl=file:///media/cdrom
	enabled=1
	gpgcheck=0
	创建挂载点后进行挂载操作，并设置成开机自动挂载（详见第 6 章）。 尝试使用 Yum 软
	件仓库来安装 Web 服务，出现 Complete！ 则代表配置正确：
	[root@linuxprobe yum.repos.d]# mkdir -p /media/cdrom
	[root@linuxprobe yum.repos.d]# mount /dev/cdrom /media/cdrom
	mount: /dev/sr0 is write-protected, mounting read-only
	[root@linuxprobe yum.repos.d]# vim /etc/fstab
	/dev/cdrom /media/cdrom iso9660 defaults 0 0
	[root@linuxprobe ~]# yum install httpd
	Loaded plugins: langpacks, product-id, subscription-manager
	………………省略部分输出信息………………
	Dependencies Resolved
	===============================================================================
	Package Arch Version Repository Size
	===============================================================================
	Installing:
	httpd x86_64 2.4.6-17.el7 rhel 1.2 M
	Installing for dependencies:
	apr x86_64 1.4.8-3.el7 rhel 103 k
	apr-util x86_64 1.5.2-6.el7 rhel 92 k
	httpd-tools x86_64 2.4.6-17.el7 rhel 77 k
	mailcap noarch 2.1.41-2.el7 rhel 31 k
	Transaction Summary
	===============================================================================
	Install 1 Package (+4 Dependent packages)
	Total download size: 1.5 M
	Installed size: 4.3 M
	Is this ok [y/d/N]: y
	Downloading packages:
	-------------------------------------------------------------------------------
	………………省略部分输出信息………………
	Complete!

二、编写shell脚本
		可以将 Shell 终端解释器当作人与计算机硬件之间的“翻译官”，它作为用户与 Linux 系
	统内部的通信媒介，除了能够支持各种变量与参数外，还提供了诸如循环、分支等高级编程
	语言才有的控制结构特性。要想正确使用 Shell 中的这些功能特性，准确下达命令尤为重要。
	Shell 脚本命令的工作方式有两种：交互式和批处理。
	➢ 交互式（Interactive）：用户每输入一条命令就立即执行。
	➢ 批处理（Batch）：由用户事先编写好一个完整的 Shell 脚本， Shell 会一次性执行脚本
	中诸多的命令。
	在 Shell 脚本中不仅会用到前面学习过的很多 Linux 命令以及正则表达式、管道符、数据
	流重定向等语法规则，还需要把内部功能模块化后通过逻辑语句进行处理，最终形成日常所
	见的 Shell 脚本。
	查看 SHELL 变量可以发现当前系统已经默认使用 Bash 作为命令行终端解释器了：
	[root@linuxprobe ~]# echo $SHELL
	/bin/
	
练习一、编写简单的脚本
		估计读者在看完上文中有关 Shell 脚本的复杂描述后，会累觉不爱吧。但是，上文指的是
	一个高级 Shell 脚本的编写原则，其实使用 Vim 编辑器把 Linux 命令按照顺序依次写入到一
	个文件中，这就是一个简单的脚本了。
	例如，如果想查看当前所在工作路径并列出当前目录下所有的文件及属性信息，实现这
	个功能的脚本应该类似于下面这样：
	[root@linuxprobe ~]# vim example.sh
	#!/bin/bash
	#For Example BY linuxprobe.com
	pwd
	ls -al
	Shell 脚本文件的名称可以任意，但为了避免被误以为是普通文件，建议将.sh 后缀加上，以
	表示是一个脚本文件。在上面的这个 example.sh 脚本中实际上出现了三种不同的元素：第一行的
	脚本声明（#!）用来告诉系统使用哪种 Shell 解释器来执行该脚本；第二行的注释信息（#）是对
	脚本功能和某些命令的介绍信息，使得自己或他人在日后看到这个脚本内容时，可以快速知道该
	脚本的作用或一些警告信息；第三、四行的可执行语句也就是我们平时执行的 Linux 命令了。什
	么？！你们不相信这么简单就编写出来了一个脚本程序，那我们来执行一下看看结果：
	[root@linuxprobe ~]# bash example.sh
	/root/Desktop
	total 8
	drwxr-xr-x. 2 root root 23 Jul 23 17:31 .
	dr-xr-x---. 14 root root 4096 Jul 23 17:31 ..
	-rwxr--r--. 1 root root 55 Jul 23 17:31 example.sh
	除了上面用 bash 解释器命令直接运行 Shell 脚本文件外，第二种运行脚本程序的方法是
	通过输入完整路径的方式来执行。但默认会因为权限不足而提示报错信息，此时只需要为脚
	本文件增加执行权限即可（详见第 5 章）。初次学习 Linux 系统的读者不用心急，等下一章学
	完用户身份和权限后再来做这个实验也不迟：
	[root@linuxprobe ~]# ./example.sh
	bash: ./Example.sh: Permission denied
	[root@linuxprobe ~]# chmod u+x example.sh
	[root@linuxprobe ~]# ./example.sh
	/root/Desktop
	total 8
	drwxr-xr-x. 2 root root 23 Jul 23 17:31 .
	dr-xr-x---. 14 root root 4096 Jul 23 17:31 ..
	-rwxr--r--. 1 root root 55 Jul 23 17:31 example.sh